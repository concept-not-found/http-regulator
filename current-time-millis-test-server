#!/usr/bin/env groovy

@Grapes([
	@Grab("org.eclipse.jetty:jetty-server:9.1.0.v20131115"),
	@Grab("commons-cli:commons-cli:1.2")
])

import org.eclipse.jetty.server.*
import org.eclipse.jetty.server.handler.*
import org.eclipse.jetty.util.thread.*
import javax.servlet.http.*
import org.apache.commons.cli.*
import java.util.concurrent.atomic.*

def options = new Options()
options.addOption(OptionBuilder
	.hasArg()
	.withArgName("port")
	.withType(Number)
	.withDescription("the port this server runs on.  default: 9000")
	.withLongOpt("port")
	.create("p"))

def port = 9000
try {
	def commandLine = new GnuParser().parse(options, args)
	if (commandLine.hasOption("port")) {
		port =  commandLine.getParsedOptionValue("port").intValue()
	}
} catch (ParseException e) {
	System.err << "Failed to parse options: ${e.message}\n"
	new HelpFormatter().printHelp("current-time-millis-test-server", options)
	System.exit(1)
}

def server = new Server(port)

def requestCount = new AtomicInteger()
server.handler = new AbstractHandler() {
	@Override
	public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) {
		response.status = 200
		response.setHeader("Content-Type", "text/plain")
		response.writer.withWriter {
			it << "time "
			it << System.currentTimeMillis()
			it << "\n"
			it << "request "
			it << requestCount.incrementAndGet()
			it << "\n"
		}
		response.flushBuffer()
	}
}

def timer = new Timer(true)
timer.scheduleAtFixedRate(new TimerTask() {
	public void run() {
		def requests = requestCount.getAndSet(0)
		if (requests > 0) {
			println("$requests per second")
		}
	}
}, 0, 1000)
server.start()
server.join()

